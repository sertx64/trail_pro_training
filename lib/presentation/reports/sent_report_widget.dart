import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:trailpro_planning/domain/report_cubit.dart';
import 'package:trailpro_planning/domain/sent_report.dart';

class SentReportWidget extends StatefulWidget {
  const SentReportWidget(this.date, {super.key});
  final String date;

  @override
  State<SentReportWidget> createState() => _SentReportWidgetState();
}

class _SentReportWidgetState extends State<SentReportWidget> {
  List<String>? reports;
  String textFeedback = '';
  double _load = 3.0;
  double _feeling = 3.0;
  final TextEditingController controllerFeedback = TextEditingController();

  void sentReport() {
    if (controllerFeedback.text == '') {
      controllerFeedback.text = '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
    }
    SentStudentReport().sentReport(widget.date, _load.toStringAsFixed(0),
        _feeling.toStringAsFixed(0), controllerFeedback.text);
    context.read<ReportCubit>().renewReportsOnWidget(_load.toStringAsFixed(0),
        _feeling.toStringAsFixed(0), controllerFeedback.text);
  }

  void sentReportSkip() {
    SentStudentReport()
        .sentReport(widget.date, '0', '0', '–ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞');
    context
        .read<ReportCubit>()
        .renewReportsOnWidget('0', '0', '–ü—Ä–æ–ø—É—Å—Ç–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞');
  }

  void _showInfoModal(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–°–ø—Ä–∞–≤–∫–∞'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                    style: TextStyle(color: Colors.red, fontSize: 20),
                    '–ù–∞–≥—Ä—É–∑–∫–∞'),
                const Text(
                    '–í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ —É—Å–∏–ª–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –∏–∑–º–µ—Ä–∏—Ç—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 –æ–±—ä–µ–º —É—Å–∏–ª–∏–π, –∫–æ—Ç–æ—Ä—ã–µ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –≤—ã –ø—Ä–∏–ª–æ–∂–∏–ª–∏ –∫ –∑–∞–Ω—è—Ç–∏—é. –î–∏–∞–ø–∞–∑–æ–Ω —à–∫–∞–ª—ã: –æ—Ç ¬´–û—á–µ–Ω—å –ª–µ–≥–∫–æ¬ª –¥–æ ¬´–û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ¬ª.'),
                const Text(
                    style: TextStyle(color: Colors.blue, fontSize: 12),
                    '1 - –û—á–µ–Ω—å –ª–µ–≥–∫–æ'),
                const Text(
                    style: TextStyle(color: Colors.green, fontSize: 12),
                    '2 - –õ–µ–≥–∫–æ'),
                Text(
                    style: TextStyle(color: Colors.orange[700], fontSize: 12),
                    '3 - –£–º–µ—Ä–µ–Ω–Ω–æ'),
                const Text(
                    style: TextStyle(color: Colors.red, fontSize: 12),
                    '4 - –¢—Ä—É–¥–Ω–æ'),
                Text(
                    style: TextStyle(color: Colors.red[700], fontSize: 12),
                    '5 - –û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ'),
                const SizedBox(height: 10),
                const Text(
                    style: TextStyle(color: Colors.blue, fontSize: 20),
                    '–°–∞–º–æ—á—É—Å—Ç–≤–∏–µ'),
                const Text(
                    '–ë—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à–∏–µ –∏ –ø–ª–æ—Ö–∏–µ –¥–Ω–∏, –Ω—É–∂–Ω–æ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º –∫ —Ç–æ–º—É, —á—Ç–æ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –≤–æ –≤—Ä–µ–º—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è. –û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—ë —Å–∞–º–æ—á—É—Å—Ç–≤–∏–µ –ø–æ –ø—è—Ç–∏–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ.'),
                const Text(
                    style: TextStyle(fontSize: 14), '1 - üòû –û—á–µ–Ω—å —Å–ª–∞–±—ã–º'),
                const Text(style: TextStyle(fontSize: 14), '2 - ‚òπÔ∏è –°–ª–∞–±—ã–º'),
                const Text(style: TextStyle(fontSize: 14), '3 - üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ'),
                const Text(style: TextStyle(fontSize: 14), '4 - üôÇ –°–∏–ª—å–Ω—ã–º'),
                const Text(
                    style: TextStyle(fontSize: 14), '5 - üòÑ –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–º'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Center(
                  child:
                      Text(style: TextStyle(color: Colors.black), '–ü–æ–Ω—è—Ç–Ω–æ')),
            ),
          ],
        );
      },
    );
  }

  void _showSentReportModal(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç?'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                        style: const TextStyle(color: Colors.red),
                        '–ù–∞–≥—Ä—É–∑–∫–∞ ${_load.toStringAsFixed(0)}: '),
                    Text(
                      _load == 1
                          ? '–û—á–µ–Ω—å –ª–µ–≥–∫–æ'
                          : _load == 2
                              ? '–õ–µ–≥–∫–æ'
                              : _load == 3
                                  ? '–£–º–µ—Ä–µ–Ω–Ω–æ'
                                  : _load == 4
                                      ? '–¢—Ä—É–¥–Ω–æ'
                                      : _load == 5
                                          ? '–û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ'
                                          : '',
                      style: TextStyle(
                        color: _load == 1
                            ? Colors.blue
                            : _load == 2
                                ? Colors.green
                                : _load == 3
                                    ? Colors.orange[700]
                                    : _load == 4
                                        ? Colors.red
                                        : _load == 5
                                            ? Colors.red[700]
                                            : Colors.black,
                      ),
                    ),
                  ],
                ),
                Row(
                  children: [
                    const Text(
                        style: TextStyle(color: Colors.blue),
                        '–û—â—É—â–∞–µ—Ç–µ —Å–µ–±—è '),
                    Text(
                      _feeling == 1
                          ? '–û—á–µ–Ω—å —Å–ª–∞–±—ã–º'
                          : _feeling == 2
                              ? '–°–ª–∞–±—ã–º'
                              : _feeling == 3
                                  ? '–ù–æ—Ä–º–∞–ª—å–Ω–æ'
                                  : _feeling == 4
                                      ? '–°–∏–ª—å–Ω—ã–º'
                                      : _feeling == 5
                                          ? '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–º'
                                          : '',
                      style: const TextStyle(
                        color: Colors.black,
                      ),
                    ),
                  ],
                ),
                Text((controllerFeedback.text == '')
                    ? '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
                    : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${controllerFeedback.text}'),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                sentReport();
                Navigator.of(context).pop();
              },
              child: const Center(
                  child: Text(
                      style: TextStyle(color: Colors.black), '–î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ')),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Center(
                  child: Text(style: TextStyle(color: Colors.black), '–ù–µ—Ç')),
            ),
          ],
        );
      },
    );
  }

  void _showSkipModal(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?'),
          content: const Text(
              '–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á—ë—Ç –æ —Ç–æ–º, —á—Ç–æ —É –í–∞—Å –±—ã–ª –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞.'),
          actions: [
            TextButton(
              onPressed: () {
                sentReportSkip();
                Navigator.of(context).pop();
              },
              child: const Center(
                  child: Text(
                      style: TextStyle(color: Colors.red), '–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Center(
                  child: Text(
                      style: TextStyle(color: Colors.black),
                      '–ù–µ—Ç, —è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è')),
            ),
          ],
        );
      },
    );
  }

  @override
  void initState() {
    controllerFeedback.text = textFeedback;
    super.initState();
  }

  @override
  void dispose() {
    controllerFeedback.dispose();
    print('DISPOSE REPORT WIDGET!');
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const SizedBox(
                width: 210,
                child: Text(
                    '–ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å')),
            IconButton(
              icon: const Icon(color: Colors.blueAccent, Icons.help_outline),
              onPressed: () {
                _showInfoModal(context);
              },
            ),
          ],
        ),
        Row(
          children: [
            const Text(
                style: TextStyle(color: Colors.red, fontSize: 20),
                '–ù–∞–≥—Ä—É–∑–∫–∞: '),
            Text(
              _load == 1
                  ? '–û—á–µ–Ω—å –ª–µ–≥–∫–æ'
                  : _load == 2
                      ? '–õ–µ–≥–∫–æ'
                      : _load == 3
                          ? '–£–º–µ—Ä–µ–Ω–Ω–æ'
                          : _load == 4
                              ? '–¢—Ä—É–¥–Ω–æ'
                              : _load == 5
                                  ? '–û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ'
                                  : '',
              style: TextStyle(
                color: _load == 1
                    ? Colors.blue
                    : _load == 2
                        ? Colors.green
                        : _load == 3
                            ? Colors.orange[700]
                            : _load == 4
                                ? Colors.red
                                : _load == 5
                                    ? Colors.red[700]
                                    : Colors.black,
                fontSize: 20,
              ),
            ),
          ],
        ),
        SliderTheme(
          data: SliderThemeData(
            trackHeight: 15.0,
            thumbShape: const RoundSliderThumbShape(enabledThumbRadius: 15.0),
            overlayShape: const RoundSliderOverlayShape(overlayRadius: 20.0),
            activeTrackColor: Colors.red,
            inactiveTrackColor: Colors.grey.withOpacity(0.5),
            overlayColor: Colors.green.withAlpha(52),
          ),
          child: Slider(
            min: 1,
            max: 5,
            divisions: 4,
            value: _load,
            //label: _load.toStringAsFixed(0),
            thumbColor: const Color.fromRGBO(255, 132, 26, 1),
            onChanged: (newValue) {
              textFeedback = controllerFeedback.text;
              _load = newValue;
              setState(() {});
            },
          ),
        ),
        const SizedBox(height: 10),
        Row(
          children: [
            const Text(
                style: TextStyle(color: Colors.blue, fontSize: 20),
                '–°–∞–º–æ—á—É—Å—Ç–≤–∏–µ: '),
            Text(
              _feeling == 1
                  ? 'üòû'
                  : _feeling == 2
                      ? '‚òπÔ∏è'
                      : _feeling == 3
                          ? 'üòê'
                          : _feeling == 4
                              ? 'üôÇ'
                              : _feeling == 5
                                  ? 'üòÑ'
                                  : '',
              style: const TextStyle(
                color: Colors.black,
                fontSize: 30,
              ),
            ),
          ],
        ),
        SliderTheme(
          data: SliderThemeData(
            trackHeight: 15.0,
            thumbShape: const RoundSliderThumbShape(enabledThumbRadius: 15.0),
            overlayShape: const RoundSliderOverlayShape(overlayRadius: 20.0),
            activeTrackColor: Colors.blue,
            inactiveTrackColor: Colors.grey.withOpacity(0.5),
            overlayColor: Colors.green.withAlpha(52),
          ),
          child: Slider(
            min: 1,
            max: 5,
            divisions: 4,
            value: _feeling,
            //label: _feeling.toStringAsFixed(0),
            thumbColor: const Color.fromRGBO(255, 132, 26, 1),
            onChanged: (newValue) {
              textFeedback = controllerFeedback.text;
              _feeling = newValue;
              setState(() {});
            },
          ),
        ),
        const SizedBox(height: 10),
        const Text('–í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'),
        TextField(
          maxLength: 200,
          maxLines: null,
          decoration: const InputDecoration(
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.all(Radius.circular(16.0)),
            ),
          ),
          style: const TextStyle(
              fontWeight: FontWeight.w600,
              color: Color.fromRGBO(1, 57, 104, 1),
              fontSize: 16),
          controller: controllerFeedback,
        ),
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            ElevatedButton(
                style: ElevatedButton.styleFrom(
                    elevation: 8,
                    backgroundColor: const Color.fromRGBO(1, 57, 104, 1)),
                onPressed: () {
                  _showSentReportModal(context);
                },
                child: const Text(
                    style: TextStyle(
                        fontSize: 20, color: Color.fromRGBO(255, 132, 26, 1)),
                    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å')),
            ElevatedButton(
                style: ElevatedButton.styleFrom(
                    elevation: 8, backgroundColor: Colors.red),
                onPressed: () {
                  _showSkipModal(context);
                },
                child: const Text(
                    style: TextStyle(fontSize: 20, color: Colors.black),
                    '–ü—Ä–æ–ø—É—Å—Ç–∏–ª')),
          ],
        ),
      ],
    );
  }
}
